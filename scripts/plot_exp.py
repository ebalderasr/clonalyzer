#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
plot_exp.py
~~~~~~~~~~~
Bar plots of Clone-level kinetic parameters during exponential phase.

Assumes that `outputs/kinetics_by_clone.csv` exists
(generated by `exp_phase_kinetics.py`).

Each plot shows one metric (mean ± SD), by Clone.

Outputs
-------
Figures saved in:
• outputs/figures_exp/

Author
------
Emiliano Balderas R. | 16 Jul 2025
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path

# ───── Configuration ───────────────────────────────────────────────────── #
CSV_PATH = Path("outputs/kinetics_by_clone.csv")
FIGURE_DIR = Path("outputs/figures_exp")
FIGURE_DIR.mkdir(parents=True, exist_ok=True)

FIGSIZE = (6.0, 4.5)
DPI = 300
AXES_RECT = [0.15, 0.15, 0.78, 0.78]

sns.set_style("whitegrid")

# ───── Load data ───────────────────────────────────────────────────────── #
if not CSV_PATH.exists():
    raise FileNotFoundError(
        f"❌ File not found:\n  {CSV_PATH}\n"
        "Please run `exp_phase_kinetics.py` first."
    )

df = pd.read_csv(CSV_PATH)

# ───── Color palette by clone ──────────────────────────────────────────── #
clones = df["Clone"].tolist()
palette = sns.color_palette("tab10", len(clones))
CLONE_COLOR = dict(zip(clones, palette))

# ───── Plot function: bar with error ───────────────────────────────────── #
def plot_bar(metric: str, ylabel: str):
    means = df[f"{metric}_mean"]
    stds  = df[f"{metric}_std"]

    fig = plt.figure(figsize=FIGSIZE, dpi=DPI)
    ax = fig.add_axes(AXES_RECT)

    ax.bar(
        clones,
        means,
        yerr=stds,
        capsize=6,
        edgecolor="black",
        linewidth=0.7,
        color=[CLONE_COLOR[c] for c in clones],
        error_kw=dict(ecolor="black", linewidth=1.2)
    )

    ax.set_xlabel("Clone", fontsize=12)
    ax.set_ylabel(ylabel, fontsize=12)
    ax.set_title(metric, fontsize=13)
    ax.tick_params(labelsize=10)
    ax.set_axisbelow(True)
    ax.grid(axis="y", linestyle="--", alpha=0.5)

    fig.tight_layout()
    fig.savefig(FIGURE_DIR / f"{metric}_bar.png")
    plt.close(fig)

# ───── Metrics to plot ─────────────────────────────────────────────────── #
METRICS = [
    ("mu",     r"μ (h$^{-1}$)"),
    ("IVCD",   r"IVCD (cell·h)"),
    ("q_Glc",  r"q$_{Glc}$ (pmol·cell$^{-1}$·h$^{-1}$)"),
    ("q_Lac",  r"q$_{Lac}$ (pmol·cell$^{-1}$·h$^{-1}$)"),
    ("Y_XG",   r"Y$_{X/G}$ (cells·mol$^{-1}$)"),
    ("Y_XL",   r"Y$_{X/L}$ (cells·mol$^{-1}$)"),
]

for metric, label in METRICS:
    if f"{metric}_mean" in df.columns:
        plot_bar(metric, label)

print("✓ Bar plots saved in ./outputs/figures_exp/")
