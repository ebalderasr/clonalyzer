#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
grouped_kinetics.py
~~~~~~~~~~~~~~~~~~~
Aggregate CHO fed-batch data (Clone × t_hr) and compute
mean ± SD for all numeric variables.

Assumes that `outputs/interval_kinetics.csv` was previously
generated by `interval_kinetics.py`.

Outputs
-------
Aggregated CSV saved in `outputs/results_agg_by_clone_time.csv`.

Author
------
Emiliano Balderas R. | 16 Jul 2025
"""

import pandas as pd
import numpy as np
from pathlib import Path
import os

# ───── Configuration ───────────────────────────────────────────────────── #
INPUT_FILE  = Path("outputs/interval_kinetics.csv")
OUTPUT_FILE = Path("outputs/results_agg_by_clone_time.csv")

# ───── Load data ───────────────────────────────────────────────────────── #
if not INPUT_FILE.exists():
    raise FileNotFoundError(
        f"❌ Input file not found:\n  {INPUT_FILE}\n"
        "Please run `interval_kinetics.py` first."
    )

df = pd.read_csv(INPUT_FILE)

# ───── Identify numeric columns (exclude t_hr) ─────────────────────────── #
numeric_cols = df.select_dtypes(include="number").columns.difference(["t_hr"])

# ───── Group by Clone × t_hr and calculate mean ± SD ───────────────────── #
agg_df = (
    df.groupby(["Clone", "t_hr"], observed=True)[numeric_cols]
      .agg(["mean", "std"])
      .rename(columns={"mean": "avg", "std": "sd"})
)

# ───── Flatten MultiIndex column names ─────────────────────────────────── #
agg_df.columns = [f"{var}_{stat}" for var, stat in agg_df.columns]

# ───── Reset index to restore columns ──────────────────────────────────── #
agg_df = agg_df.reset_index()

# ───── Save result ─────────────────────────────────────────────────────── #
OUTPUT_FILE.parent.mkdir(parents=True, exist_ok=True)
agg_df.to_csv(OUTPUT_FILE, index=False)

if __name__ == "__main__":
    print(f"✓ Aggregated data (Clone × t_hr): {agg_df.shape}")
    print(f"✓ Saved to:\n  {OUTPUT_FILE}")
